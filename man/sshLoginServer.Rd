% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/login.R
\name{sshLoginServer}
\alias{sshLoginServer}
\title{ssh login server module}
\usage{
sshLoginServer(
  id,
  host,
  port,
  log_out = shiny::reactiveVal(),
  reload_on_logout = FALSE,
  cookie_logins = FALSE,
  sessionid_col,
  cookie_getter,
  cookie_setter,
  manager_env = "MANAGER",
  sep = ","
)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the module's UI function}

\item{host}{bare (quotes) IP or URL of machine to use for SSH login}

\item{port}{bare (unquoted) an integer corresponding to the port used for SSH login}

\item{log_out}{[reactive] supply the returned reactive from \link{logoutServer} here to trigger a user logout}

\item{reload_on_logout}{should app force a session reload on logout?}

\item{cookie_logins}{enable automatic logins via browser cookies?}

\item{sessionid_col}{bare (unquoted) or quoted column name containing session ids}

\item{cookie_getter}{a function that returns a data.frame with at least two columns: user and session}

\item{cookie_setter}{a function with two parameters: user and session.  The function must save these to a database.}

\item{manager_env}{environment variable used to determine if a user has 'manager' permissions}

\item{sep}{delimiter to separate manager environment variable}
}
\value{
The module will return a reactive 3 element list to your main application.
  First element \code{user_auth} is a boolean indicating whether there has been
  a successful login or not. Second element \code{info} will be the data frame provided
  to the function, filtered to the row matching the successfully logged in username. Third 
  element \code{manager} is a boolean indicating whether a logged in user has 'manager' credentials,
  useful for granting specific users extra privleges. 
  When \code{user_auth} is FALSE \code{info} is NULL.
}
\description{
Shiny authentication module for use with \link{loginUI}
}
\details{
This module uses shiny's new \link[shiny]{moduleServer} method as opposed to the \link[shiny]{callModule}
method used by the now deprecated \link{login} function and must be called differently in your app.
For details on how to migrate see the 'Migrating from callModule to moduleServer' section of 
\href{https://shiny.rstudio.com/articles/modules.html}{Modularizing Shiny app code}.
}
\examples{
library(shiny)

ui <- fluidPage(
  # add logout button UI
  div(class = "pull-right", sshinyauthr::logoutUI(id = "logout")),
  # add login panel UI function
  shinyauthr::loginUI(id = "login"),
  # setup table output to show user info after login
  tableOutput("user_table"),
  # setup table output to show another table after manager login
  tableOutput("manager_table")
)

server <- function(input, output, session) {
  # call login module supplying host and port
  # set manager_env as 'USER' environment variable and login with standard user details
  # ssh on local machine needs to be enabled 
  credentials <- sshinyauthr::sshLoginServer(
    id = "login",
    log_out = reactive(logout_init()),
    host = '127.0.0.1',
    port = 22,
    manager_env = 'USER',
    reload_on_logout = FALSE,
    cookie_logins = FALSE
  )
  
  # call the logout module with reactive trigger to hide/show
  logout_init <- sshinyauthr::logoutServer(
    id = "logout",
    active = reactive(credentials()$user_auth)
  )
  
  output$user_table <- renderTable({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    credentials()$info
  })
  
  output$manager_table <- renderTable({
    # use req to only render results when credentials()$manager is TRUE
    req(credentials()$manager)
    data.frame(manager=TRUE)
  })
}

if (interactive()) shinyApp(ui = ui, server = server)
}
