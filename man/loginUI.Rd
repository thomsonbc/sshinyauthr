% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/login.R
\name{loginUI}
\alias{loginUI}
\title{login UI module}
\usage{
loginUI(
  id,
  title = "Please log in",
  user_title = "User Name",
  user = "",
  domain_title = "Domain",
  domain = "",
  pass_title = "Password",
  password = "",
  login_title = "Log in",
  login_btn_class = "btn-primary",
  error_message = "Invalid username or password!",
  additional_ui = NULL,
  cookie_expiry = 7
)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the module's server function}

\item{title}{header title for the login panel}

\item{user_title}{label for the user name text input}

\item{user}{default user name, good for development purposes}

\item{domain_title}{label for domain panel}

\item{domain}{default domain, good for development purposes}

\item{pass_title}{label for the password text input}

\item{password}{default password, good for development purposes}

\item{login_title}{label for the login button}

\item{login_btn_class}{bootstrap class for the login button. defaults to "btn-primary"}

\item{error_message}{message to display after failed login}

\item{additional_ui}{additional shiny UI element(s) to add below login button. Wrap multiple inside \code{shiny::tagList()}}

\item{cookie_expiry}{number of days to request browser to retain login cookie}
}
\value{
Shiny UI login panel with user name text input, password text input and login action button.
}
\description{
Shiny UI Module for use with \link{loginServer}
}
\examples{
library(shiny)

ui <- fluidPage(
  # add logout button UI
  div(class = "pull-right", sshinyauthr::logoutUI(id = "logout")),
  # add login panel UI function
  shinyauthr::loginUI(id = "login"),
  # setup table output to show user info after login
  tableOutput("user_table"),
  # setup table output to show another table after manager login
  tableOutput("manager_table")
)

server <- function(input, output, session) {
  # call login module supplying host and port
  # set manager_env as 'USER' environment variable and login with standard user details
  # ssh on local machine needs to be enabled 
  credentials <- sshinyauthr::sshLoginServer(
    id = "login",
    log_out = reactive(logout_init()),
    host = '127.0.0.1',
    port = 22,
    manager_env = 'USER',
    reload_on_logout = FALSE,
    cookie_logins = FALSE
  )
  
  # call the logout module with reactive trigger to hide/show
  logout_init <- sshinyauthr::logoutServer(
    id = "logout",
    active = reactive(credentials()$user_auth)
  )
  
  output$user_table <- renderTable({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    credentials()$info
  })
  
  output$manager_table <- renderTable({
    # use req to only render results when credentials()$manager is TRUE
    req(credentials()$manager)
    data.frame(manager=TRUE)
  })
}

if (interactive()) shinyApp(ui = ui, server = server)
}
